\name{Aupus}
\alias{Aupus}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
Package replicating Aupus
}
\description{
%%  ~~ A concise (1-5 lines) description of what the function does. ~~
}
\usage{
Aupus(nodes, edges, from, to, param)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{nodes}{
%%     ~~Describe \code{nodes} here~~
}
  \item{edges}{
%%     ~~Describe \code{edges} here~~
}
  \item{from}{
%%     ~~Describe \code{from} here~~
}
  \item{to}{
%%     ~~Describe \code{to} here~~
}
  \item{param}{
%%     ~~Describe \code{param} here~~
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
%%  ~~who you are~~
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function (nodes, edges, from, to, param) 
{
    stopifnot(is(nodes, "data.table"))
    stopifnot(is(edges, "data.table"))
    stopifnot(from \%in\% colnames(edges))
    stopifnot(to \%in\% colnames(edges))
    processingLevelData = edges[, findProcessingLevel(.SD, from = from, 
        to = to), by = c(param$keyNames$areaName, param$keyNames$yearName)]
    setkeyv(processingLevelData, key(nodes))
    nodes[processingLevelData, `:=`(processingLevel, i.processingLevel)]
    nodes[is.na(processingLevel), `:=`(processingLevel, as.numeric(0))]
    for (currentLevel in range(nodes$processingLevel)) {
        calculateAupusElements(aupusFinalData = nodes[processingLevel == 
            currentLevel, ], itemTypeCol = param$keyNames$itemTypeName, 
            balanceElementNum = param$keyNames$balanceElementName)
        updateEdges(nodes = nodes[processingLevel == currentLevel, 
            ], edges = edges, element41Num = with(param$keyNames, 
            paste0(valuePrefix, elementName, "_41")), element131Num = with(param$keyNames, 
            paste0(valuePrefix, elementName, "_131")))
        updateInputFromProcessing(nodes = nodes[processingLevel == 
            currentLevel, ], edges = edges, element31Num = "Value_measuredElementFS_31")
    }
    nodes[, `:=`(processingLevel, NULL)]
    list(nodes = nodes, edges = edges)
  }
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory.
\keyword{ ~kwd1 }
\keyword{ ~kwd2 }% __ONLY ONE__ keyword per line
