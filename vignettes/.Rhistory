replaceable("A", 1)
replaceable("M", 1)
replaceable("M", NA)
replaceable("C", NA)
replaceable("T", NA)
source('~/Documents/SVN/RModules/faoswsAupus/R/replaceable.R')
data
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle11.R')
nodes[, Value_measuredElementFS_11]
nodes[, Value_measuredElementFS_11 := c(12000, 23000, 20000, 20000, 20000, rep(NA, 10))]
nodes[, Value_measuredElementFS_11]
nodes[, flagFaostat_measuredElementFS_11]
nodes[, flagFaostat_measuredElementFS_11 := c("", "", "", "T", "T", rep(NA, 10)]
nodes[, flagFaostat_measuredElementFS_11 := c("", "", "", "T", "T", rep(NA, 10))]
nodes[, flagFaostat_measuredElementFS_11]
nodes[, Value_measuredElementFS_11]
nodes[, c(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
calculateEle11(data = nodes, aupusParam = usAupusParam)
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
t(nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)])
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
t(nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)])
nodes[, Value_measuredElementFS_11 := c(12000, 23000, 20000, 20000, 20000, rep(NA, 10))]
t(nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)])
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
calculateEle11(data = nodes, aupusParam = usAupusParam)
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
nodes[, Value_measuredElementFS_11]
nodes[, flagFaostat_measuredElementFS_11]
calculateEle11(data = nodes, aupusParam = usAupusParam)
nodes[, Value_measuredElementFS_11]
nodes[, flagFaostat_measuredElementFS_11]
nodes[, Value_measuredElementFS_21]
nodes[, flagFaostat_measuredElementFS_21]
calculateEle21
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle21.R')
nodes[, Value_measuredElementFS_21]
nodes[, flagFaostat_measuredElementFS_21]
calculateEle21(data = nodes, aupusParam = usAupusParam)
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle21.R')
nodes[, Value_measuredElementFS_21]
nodes[, flagFaostat_measuredElementFS_21]
calculateEle21(data = nodes, aupusParam = usAupusParam)
nodes[, Value_measuredElementFS_11]
nodes[, Value_measuredElementFS_21]
nodes[, flagFaostat_measuredElementFS_21]
nodes[, Value_measuredElementFS_31]
nodes[, flagFaostat_measuredElementFS_31]
calculateEle31
replaceable
nodes[, Value_measuredElementFS_31]
nodes[, flagFaostat_measuredElementFS_31]
calculateEle31(data = nodes, aupusParam = usAupusParam)
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle71.R')
1/0
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle93.R')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle93.R')
source('~/.active-rstudio-document')
computed.mat = matrix(c(NA, NA, NA, NA))
computed.mat
computed.mat = matrix(c(NA, NA, NA, NA), nrow = 1)
computed.mat
apply(computed.mat, 1, FUN = function(x) na.omit(x)[1])
subData[, get(element21Num)]
vec = 1:10
vec[2:11]
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle111.R')
source('~/.active-rstudio-document')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle141.R')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle141.R')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle144.R')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle151.R', echo=TRUE)
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle151.R')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle161.R')
setwd("Documents/SVN/RModules/faoswsAupus/vignettes/")
knitr::knit2pdf("faoswsAupus.Rnw")
library(knitr)
opts_chunk$set(fig.path='figure/', fig.align='center', fig.show='hold',
warning=FALSE, message=FALSE, error=FALSE, tidy=FALSE,
results='markup', eval=TRUE, echo=TRUE, cache=FALSE, dpi=200)
options(replace.assign=TRUE, width=80)
assign("depthtrigger", 10, data.table:::.global)
library(faoswsAupus)
library(faosws)
library(igraph)
library(data.table)
is(US)
names(US)
sapply(US, class)
sapply(US, dim)
is(usAupusParam)
names(usAupusParam)
GetTestEnvironment(
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",
token = "66984d62-6add-4ad4-bdf3-5d8538bb2b70")
usAupusParam = getAupusParameter(areaCode = "231", assignGlobal = FALSE,
yearsToUse = 2009:2013)
US = getAupusDataset(aupusParam = usAupusParam)
rm(usAupusToken)
rm(usAupusParam)
plotCommodityTree(US$shareData)
US = subsetAupus(aupusData = US, itemKeys = c(71, 72, 73),
aupusParam = usAupusParam)
vignette("faoswsAupus")
standardization(standardizationGraph[[1]], standardizeElement = FBSelements,
plot = TRUE, aupusParam = usAupusParam,
vertex.size = 20, edge.arrow.size = 2, vertex.label.cex = 3)
standardization(standardizationGraph[[1]], standardizeElement = FBSelements,
plot = TRUE, aupusParam = usAupusParam,
vertex.size = 20, edge.arrow.size = 2, vertex.label.cex = 1)
vignette("faoswsAupus")
calculateEle101(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
calculateEle111(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
calculateEle121(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
calculateEle131(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
calculateEle141(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
calculateEle141(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
toProcess[, Value_measuredElementFS_141]
calculateEle141
calculateEle141(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
source('~/.active-rstudio-document', echo=TRUE)
?calculateEle141
US$ratioData$Ratio_measuredElementFS_141
calculateEle144(population11Num = "Value_population_11",
data = toProcess, aupusParam = usAupusParam)
calculateEle151(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
calculateEle161(data = toProcess, aupusParam = usAupusParam)
calculateEle171(data = toProcess, aupusParam = usAupusParam)
calculateEle174(population11Num = "Value_population_11",
data = toProcess,
aupusParam = usAupusParam)
calculateTotalNutritive(ratioNum = "Ratio_measuredElementFS_261",
elementNum = 261, data = toProcess,
aupusParam = usAupusParam)
calculateDailyNutritive(population11Num = "Value_population_11",
population21Num = "Value_population_21",
dailyElement = 264, totalElement = 261,
data = toProcess, aupusParam = usAupusParam)
toProcess[, Value_measuredElementFS_261]
library(knitr)
opts_chunk$set(fig.path='figure/', fig.align='center', fig.show='hold',
warning=FALSE, message=FALSE, error=FALSE, tidy=FALSE,
results='markup', eval=TRUE, echo=TRUE, cache=FALSE, dpi=200)
options(replace.assign=TRUE, width=80)
assign("depthtrigger", 10, data.table:::.global)
library(faoswsAupus)
library(faosws)
library(igraph)
library(data.table)
is(US)
names(US)
sapply(US, class)
sapply(US, dim)
is(usAupusParam)
names(usAupusParam)
GetTestEnvironment(
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",
token = "66984d62-6add-4ad4-bdf3-5d8538bb2b70")
usAupusParam = getAupusParameter(areaCode = "231", assignGlobal = FALSE,
yearsToUse = 2009:2013)
US = getAupusDataset(aupusParam = usAupusParam)
plotCommodityTree(US$shareData)
US = subsetAupus(aupusData = US, itemKeys = c(71, 72, 73),
aupusParam = usAupusParam)
aupusNetwork = suaToNetworkRepresentation(dataList = US,
aupusParam = usAupusParam)
names(aupusNetwork)
sapply(aupusNetwork, class)
sapply(aupusNetwork, dim)
plotCommodityTree(US$shareData, edge.arrow.size = 2, vertex.size = 25)
aupusNetwork$nodes[, .(geographicAreaFS, timePointYearsSP, measuredItemFS)]
colnames(aupusNetwork$nodes)[1:10]
aupusNetwork$edges[, .(geographicAreaFS, timePointYearsSP,
measuredItemParentFS, measuredItemChildFS)]
colnames(aupusNetwork$edges)
nodes = aupusNetwork$nodes
edges = aupusNetwork$edges
nodes = coerceColumnTypes(aupusParam = usAupusParam, data = nodes)
edges = coerceColumnTypes(aupusParam = usAupusParam, data = edges)
from = usAupusParam$keyNames$itemParentName
to = usAupusParam$keyNames$itemChildName
processingLevelData = edges[, findProcessingLevel(.SD, from = from,
to = to, aupusParam = usAupusParam),
by = c(usAupusParam$keyNames$areaName, usAupusParam$keyNames$yearName)]
setkeyv(processingLevelData, key(nodes))
invisible(nodes[processingLevelData, `:=`(processingLevel, i.processingLevel)])
invisible(nodes[is.na(processingLevel), processingLevel := 0])
nodes[, c(key(nodes), "processingLevel"), with = FALSE]
toProcess = nodes[processingLevel == 0, ]
toProcess[, Value_measuredElementFS_11]
toProcess[, Value_measuredElementFS_161]
toProcess[, flagFaostat_measuredElementFS_11]
calculateEle11(data = toProcess, aupusParam = usAupusParam)
toProcess[, Value_measuredElementFS_11]
toProcess[, Value_measuredElementFS_161]
toProcess[, flagFaostat_measuredElementFS_11]
toProcess[, Value_measuredElementFS_21]
calculateEle21(data = toProcess, aupusParam = usAupusParam)
toProcess[, Value_measuredElementFS_21]
toProcess[, Value_measuredElementFS_41]
calculateEle41(data = toProcess, aupusParam = usAupusParam)
toProcess[, Value_measuredElementFS_21]
toProcess[, Value_measuredElementFS_51]
calculateEle51(data = toProcess, aupusParam = usAupusParam)
toProcess[, Value_measuredElementFS_21]
toProcess[, Value_measuredElementFS_51]
toProcess[, Value_measuredElementFS_31]
calculateEle314151(data = toProcess, aupusParam = usAupusParam)
toProcess[, Value_measuredElementFS_63]
toProcess[, Value_measuredElementFS_71]
toProcess[, Value_measuredElementFS_93]
calculateEle63(data = toProcess, aupusParam = usAupusParam)
calculateEle71(data = toProcess, aupusParam = usAupusParam)
toProcess[, Value_measuredElementFS_63]
calculateEle93(data = toProcess, aupusParam = usAupusParam)
toProcess[, Value_measuredElementFS_93]
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle71.R')
calculateTotalSupply(data = toProcess, aupusParam = usAupusParam)
toProcess
toProcess
tail(colnames(toProcess))
toProcess$TOTAL_SUPPLY
toProcess[, Value_measuredElementFS_101]
calculateEle101(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
toProcess[, Value_measuredElementFS_101]
toProcess[, Value_measuredElementFS_111]
toProcess[, Value_measuredElementFS_121]
calculateEle111(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
toProcess[, Value_measuredElementFS_121]
toProcess
toProcess
US$ratioData
usAupusParam = getAupusParameter(areaCode = "231", assignGlobal = FALSE,
yearsToUse = 2009:2013)
US = getAupusDataset(aupusParam = usAupusParam)
is(US)
plotCommodityTree(US$shareData)
US = subsetAupus(aupusData = US, itemKeys = c(71, 72, 73),
aupusParam = usAupusParam)
US$shareData
US$shareData
US$ratioData
aupusParam
aupusParam = usAupusParam
ratioDimension =
list(Dimension(name = "geographicAreaFS",
keys = as.character(c("0",
aupusParam$areaCode))),
Dimension(name = "measuredItemFS",
keys = as.character(aupusParam$itemCode)),
Dimension(name = "timePointYearsSP",
keys = as.character(c("0", aupusParam$year))),
Dimension(name = "measuredElementFS",
keys = as.character(aupusParam$elementCode)))
ratioDataContext =
DatasetKey(domain = "faostat_one",
dataset = "aupus_ratio_fs",
dimensions = ratioDimension)
ratioPivot = c(
Pivoting(code = "geographicAreaFS", ascending = TRUE),
Pivoting(code = "measuredItemFS", ascending = TRUE),
Pivoting(code = "timePointYearsSP", ascending = FALSE),
Pivoting(code = "measuredElementFS", ascending = TRUE)
)
fullRatio =
GetData(key = ratioDataContext, flags = TRUE,
normalized = FALSE,
pivoting = ratioPivot)
fullRatio
flagColumns = grep("flag", colnames(fullRatio))
fullRatio[, `:=`(c(flagColumns), NULL)]
## Coerce logical to numeric
warning("This step should no longer be necessary upon resolution of ",
"SWS-797")
isLogical = (sapply(fullRatio, typeof) == "logical")
logicalColumns = names(which(isLogical))
for(name in logicalColumns)
fullRatio[, c(name) := as.numeric(get(name))]
oldNames = grep("Value", colnames(fullRatio), value = TRUE)
setnames(fullRatio,
old = oldNames,
new = gsub("Value", "Ratio", oldNames))
## Partition the data into three groups: ratios that apply only to
## specific years and locations, ratios applying to all years but
## specific locations, and ratios applying to all years and all
## locations
specific = fullRatio[geographicAreaFS != "0" &
timePointYearsSP != 0, ]
setkeyv(specific,
cols = c("geographicAreaFS", "measuredItemFS",
"timePointYearsSP"))
yearWildCard = fullRatio[geographicAreaFS != "0" &
timePointYearsSP == 0,
!"timePointYearsSP", with = FALSE]
setkeyv(yearWildCard, c("geographicAreaFS", "measuredItemFS"))
areaYearWildCard = fullRatio[geographicAreaFS == "0" &
timePointYearsSP == 0,
!c("geographicAreaFS", "timePointYearsSP"), with = FALSE]
setkeyv(areaYearWildCard, "measuredItemFS")
finalRatio = list(specific = specific,
yearWildCard = yearWildCard,
areaYearWildCard = areaYearWildCard)
finalRatio
finalRatio[[3]]
finalRatio[[3]][measuredItemFS == "71", ]
finalRatio[[2]][measuredItemFS == "71", ]
finalRatio[[1]][measuredItemFS == "71", ]
toProcess[, Value_measuredElementFS_141]
finalRatio[[1]][, Ratio_measuredElementFS_141]
calculateEle541
?calculateEle541
?calculateEle546
calculateTotalUtilization
?calculateEle541
?calculateEle546
calculateTotalUtilization(data = toProcess, aupusParam = usAupusParam)
calculateEle541(data = toProcess, aupusParam = usAupusParam)
calculateEle546(data = toProcess, aupusParam = usAupusParam)
tail(colnames(toProcess))
calculateBalance
library(knitr)
opts_chunk$set(fig.path='figure/', fig.align='center', fig.show='hold',
warning=FALSE, message=FALSE, error=FALSE, tidy=FALSE,
results='markup', eval=TRUE, echo=TRUE, cache=FALSE, dpi=200)
options(replace.assign=TRUE, width=80)
assign("depthtrigger", 10, data.table:::.global)
library(faoswsAupus)
library(faosws)
library(igraph)
library(data.table)
is(US)
names(US)
sapply(US, class)
sapply(US, dim)
is(usAupusParam)
names(usAupusParam)
GetTestEnvironment(
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",
token = "66984d62-6add-4ad4-bdf3-5d8538bb2b70")
usAupusParam = getAupusParameter(areaCode = "231", assignGlobal = FALSE,
yearsToUse = 2009:2013)
US = getAupusDataset(aupusParam = usAupusParam)
plotCommodityTree(US$shareData)
US = subsetAupus(aupusData = US, itemKeys = c(71, 72, 73),
aupusParam = usAupusParam)
aupusNetwork = suaToNetworkRepresentation(dataList = US,
aupusParam = usAupusParam)
names(aupusNetwork)
sapply(aupusNetwork, class)
sapply(aupusNetwork, dim)
plotCommodityTree(US$shareData, edge.arrow.size = 2, vertex.size = 25)
aupusNetwork$nodes[, .(geographicAreaFS, timePointYearsSP, measuredItemFS)]
colnames(aupusNetwork$nodes)[1:10]
aupusNetwork$edges[, .(geographicAreaFS, timePointYearsSP,
measuredItemParentFS, measuredItemChildFS)]
colnames(aupusNetwork$edges)
nodes = aupusNetwork$nodes
edges = aupusNetwork$edges
nodes = coerceColumnTypes(aupusParam = usAupusParam, data = nodes)
edges = coerceColumnTypes(aupusParam = usAupusParam, data = edges)
from = usAupusParam$keyNames$itemParentName
to = usAupusParam$keyNames$itemChildName
processingLevelData = edges[, findProcessingLevel(.SD, from = from,
to = to, aupusParam = usAupusParam),
by = c(usAupusParam$keyNames$areaName, usAupusParam$keyNames$yearName)]
setkeyv(processingLevelData, key(nodes))
invisible(nodes[processingLevelData, `:=`(processingLevel, i.processingLevel)])
invisible(nodes[is.na(processingLevel), processingLevel := 0])
nodes[, c(key(nodes), "processingLevel"), with = FALSE]
toProcess = nodes[processingLevel == 0, ]
toProcess[, Value_measuredElementFS_11]
toProcess[, Value_measuredElementFS_161]
toProcess[, flagFaostat_measuredElementFS_11]
calculateEle11(data = toProcess, aupusParam = usAupusParam)
toProcess[, Value_measuredElementFS_11]
toProcess[, flagFaostat_measuredElementFS_11]
calculateEle21(data = toProcess, aupusParam = usAupusParam)
calculateEle41(data = toProcess, aupusParam = usAupusParam)
calculateEle51(data = toProcess, aupusParam = usAupusParam)
calculateEle314151(data = toProcess, aupusParam = usAupusParam)
calculateEle63(data = toProcess, aupusParam = usAupusParam)
calculateEle71(data = toProcess, aupusParam = usAupusParam)
calculateEle93(data = toProcess, aupusParam = usAupusParam)
calculateTotalSupply(data = toProcess, aupusParam = usAupusParam)
tail(colnames(toProcess))
toProcess$TOTAL_SUPPLY
calculateEle101(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
calculateEle111(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
calculateEle121(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
calculateEle131(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
calculateEle141(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
calculateEle144(population11Num = "Value_population_11",
data = toProcess, aupusParam = usAupusParam)
calculateEle151(stotal = "TOTAL_SUPPLY", data = toProcess,
aupusParam = usAupusParam)
calculateEle161(data = toProcess, aupusParam = usAupusParam)
calculateEle171(data = toProcess, aupusParam = usAupusParam)
calculateEle174(population11Num = "Value_population_11",
data = toProcess,
aupusParam = usAupusParam)
calculateTotalNutritive(ratioNum = "Ratio_measuredElementFS_261",
elementNum = 261, data = toProcess,
aupusParam = usAupusParam)
calculateDailyNutritive(population11Num = "Value_population_11",
population21Num = "Value_population_21",
dailyElement = 264, totalElement = 261,
data = toProcess, aupusParam = usAupusParam)
calculateTotalNutritive(ratioNum = "Ratio_measuredElementFS_271",
elementNum = 271, data = toProcess,
aupusParam = usAupusParam)
calculateDailyNutritive(population11Num = "Value_population_11",
population21Num = "Value_population_21",
dailyElement = 274, totalElement = 271,
data = toProcess, aupusParam = usAupusParam)
calculateTotalNutritive(ratioNum = "Ratio_measuredElementFS_281",
elementNum = 281, data = toProcess,
aupusParam = usAupusParam)
calculateDailyNutritive(population11Num = "Value_population_11",
population21Num = "Value_population_21",
dailyElement = 284, totalElement = 281,
data = toProcess, aupusParam = usAupusParam)
calculateEle541(data = toProcess, aupusParam = usAupusParam)
calculateEle546(data = toProcess, aupusParam = usAupusParam)
calculateTotalUtilization(data = toProcess, aupusParam = usAupusParam)
calculateBalance(supply = "TOTAL_SUPPLY", utilization = "TOTAL_UTILIZATION",
data = toProcess, aupusParam = usAupusParam)
tail(colnames(toProcess))
colnames(US)
colnames(US$aupusData)
missingColumns =
c(paste0("Value_measuredElementFS_", c(541, 546)),
paste0("flagFaostat_measuredElementFS_", c(541, 546)))
US$aupusData
US$aupusData
US$aupusData = US$aupusData[, `:=`(c(missingColumns),
list(as.numeric(NA), as.numeric(NA),
as.character(NA),
as.character(NA)))]
US$aupusData
US$aupusData
colnames(US$aupusData)
save(US, file = "../data/US.RData")
calculateEle541(data = toProcess, aupusParam = usAupusParam)
calculateEle546(data = toProcess, aupusParam = usAupusParam)
library(knitr)
opts_chunk$set(fig.path='figure/', fig.align='center', fig.show='hold',
warning=FALSE, message=FALSE, error=FALSE, tidy=FALSE,
results='markup', eval=TRUE, echo=TRUE, cache=FALSE, dpi=200)
options(replace.assign=TRUE, width=80)
assign("depthtrigger", 10, data.table:::.global)
library(faoswsAupus)
library(faosws)
library(igraph)
library(data.table)
is(US)
names(US)
sapply(US, class)
sapply(US, dim)
is(usAupusParam)
names(usAupusParam)
GetTestEnvironment(
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",
token = "66984d62-6add-4ad4-bdf3-5d8538bb2b70")
usAupusParam = getAupusParameter(areaCode = "231", assignGlobal = FALSE,
yearsToUse = 2009:2013)
US = getAupusDataset(aupusParam = usAupusParam)
plotCommodityTree(US$shareData)
US = subsetAupus(aupusData = US, itemKeys = c(71, 72, 73),
aupusParam = usAupusParam)
aupusNetwork = suaToNetworkRepresentation(dataList = US,
aupusParam = usAupusParam)
names(aupusNetwork)
sapply(aupusNetwork, class)
sapply(aupusNetwork, dim)
plotCommodityTree(US$shareData, edge.arrow.size = 2, vertex.size = 25)
aupusNetwork$nodes[, .(geographicAreaFS, timePointYearsSP, measuredItemFS)]
colnames(aupusNetwork$nodes)[1:10]
aupusNetwork$edges[, .(geographicAreaFS, timePointYearsSP,
measuredItemParentFS, measuredItemChildFS)]
colnames(aupusNetwork$edges)
nodes = aupusNetwork$nodes
edges = aupusNetwork$edges
nodes = coerceColumnTypes(aupusParam = usAupusParam, data = nodes)
edges = coerceColumnTypes(aupusParam = usAupusParam, data = edges)
from = usAupusParam$keyNames$itemParentName
to = usAupusParam$keyNames$itemChildName
processingLevelData = edges[, findProcessingLevel(.SD, from = from,
to = to, aupusParam = usAupusParam),
by = c(usAupusParam$keyNames$areaName, usAupusParam$keyNames$yearName)]
setkeyv(processingLevelData, key(nodes))
invisible(nodes[processingLevelData, `:=`(processingLevel, i.processingLevel)])
invisible(nodes[is.na(processingLevel), processingLevel := 0])
nodes[, c(key(nodes), "processingLevel"), with = FALSE]
toProcess = nodes[processingLevel == 0, ]
