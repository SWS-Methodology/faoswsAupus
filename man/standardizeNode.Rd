% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/standardizeNode.R
\name{standardizeNode}
\alias{standardizeNode}
\title{Standardize Node}
\usage{
standardizeNode(graph, workingNode, standardizeElement,
  productionElement = paste0(aupusParam$keyNames$valuePrefix,
  aupusParam$keyNames$elementName, "_51"), standardizeProduction = FALSE)
}
\arguments{
\item{graph}{The graph object created by the function constructGraph.}

\item{workingNode}{The nodes to be standardized}

\item{standardizeElement}{The attribute of the nodes to be
standardized.}

\item{productionElement}{The column name of the production element in the
nodes of the graph.  Important if standardizeProduction = FALSE.}

\item{standardizeProduction}{Logical.  Production values are not
  standardized up the AUPUS commodity tree as they are already accounted for
  in the AUPUS processing (i.e. the input from processing procedure).
  However, production will need to roll up when aggregating to higher level
  groupings (e.g. oranges and mandarins from the oranges tree and mandarins
  tree).}
}
\value{
A graph object that has been updated according to the description
above.
}
\description{
Standardization follows the below process:
\itemize{
    \item Compute a matrix ("reverseMatrix" in the code) describing how
    much of a particular quantity is passed from a child to it's parent.
    The (i,j)-th entry of this matrix specifies a conversion factor for
    transferring element j quantities into element i quantities.
    \item Compute the matrix of required elements (column) for each
    commodity (row), and call this "valueMatrix".
    \item Compute the new value for each commodity by pre-multiplying
    valueMatrix by reverseMatrix and therefore aggregating children
    commodities into their parents.
    \item Lastly, save this new data back to the passed graph object, and
    return.
}
}

